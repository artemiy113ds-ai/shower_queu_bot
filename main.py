# ============================================
# –ë–æ—Ç "–û–Ω–ª–∞–π–Ω —á–µ—Ä–≥–∞ –≤ –¥—É—à"
# Python 3.8.10
# python-telegram-bot==13.15
# ============================================
#
# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:
#  - –í—Å—Ç–∞–≤—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —É –∑–º—ñ–Ω–Ω—É TOKEN: "–í—Å—Ç–∞–≤—Ç–µ —Ç–æ–∫–µ–Ω —Ç—É—Ç"
#  - –í—Å—Ç–∞–≤—Ç–µ ID –∞–¥–º—ñ–Ω–∞ —É –∑–º—ñ–Ω–Ω—É ADMIN_ID: "—ñ–¥ –∞–¥–º—ñ–Ω–∞"
#  - –ó–±–µ—Ä–µ–∂—ñ—Ç—å —è–∫ bot.py —ñ –∑–∞–ø—É—Å—Ç—ñ—Ç—å: python bot.py
#
# –ü—Ä–∏–º—ñ—Ç–∫–∏:
#  - –ö–æ–¥ –≤–∫–ª—é—á–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∞—Å–æ–≤–æ—ó —Ä—ñ–∑–Ω–∏—Ü—ñ –º—ñ–∂
#    datetime.now() —Ç–∞ datetime.utcnow() (AUTO_TZ_OFFSET_HOURS).
#    –¶–µ –¥–æ–ø–æ–º–∞–≥–∞—î –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–∏–∑–Ω–∞—á–∞—Ç–∏ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥
#    –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞.
#  - VIP-–ª–æ–≥—ñ–∫–∞ ("–°—Ç–∞—Ç–∏ –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—ñ–º") —ñ –ª–æ–≥—ñ–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—É—à"
#    –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∞—à–∏—Ö –≤–∏–º–æ–≥.
#  - –Ø–∫—â–æ —â–æ—Å—å —Ç—Ä–µ–±–∞ –ø—ñ–¥–ª–∞—à—Ç—É–≤–∞—Ç–∏ ‚Äî —Å–∫–∞–∂—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, —ñ —è –≤–Ω–µ—Å—É
#    –∫–æ—Ä–µ–∫—Ç–∏–≤–∏.
#
# ============================================

import os
import sqlite3
import math
import traceback
import shutil
import json
from datetime import datetime, timedelta
from typing import Optional, List, Tuple, Any

# telegram imports (v13.15)
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
    Bot,
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackQueryHandler,
    ConversationHandler,
    CallbackContext,
)

# ============================================
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚Äî –ó–ê–ú–Ü–ù–Ü–¢–¨ –¢–£–¢
# ============================================
TOKEN = "8270520671:AAEsObGdNzItcwA5QwKTbD4Tgj0ioOJMORE"     # üîπ –í–°–¢–ê–í–¢–ï –¢–û–ö–ï–ù –°–í–û–ì–û –ë–û–¢–ê –°–Æ–î–ò
ADMIN_ID = "5796029813"           # üîπ –í–°–¢–ê–í–¢–ï ID –ê–î–ú–Ü–ù–ê –°–Æ–î–ò
DB_PATH = "shower_queue.db"
LOG_FILE = "bot_events.log"
BACKUP_DIR = "backups"
DATETIME_FORMAT = "%Y-%m-%d %H:%M:%S"

# ============================================
# Conversation states
# ============================================
(
    REGISTER_NAME,
    REGISTER_GENDER,
    GROUP_SIZE_SELECT,
    ADMIN_WAIT_DELETE,
    ADMIN_WAIT_VIP,
    ADMIN_WAIT_MAKE_SETTINGS,
    ADMIN_WAIT_INPUT,
) = range(7)

# ============================================
# –õ–æ–≥—É–≤–∞–Ω–Ω—è —ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# ============================================
def log_event(msg: str):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ —Ñ–∞–π–ª + –∫–æ–Ω—Å–æ–ª—å –∑ –≤—ñ–¥–º—ñ—Ç–∫–æ—é —á–∞—Å—É."""
    try:
        line = f"[{datetime.now().strftime(DATETIME_FORMAT)}] {msg}"
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(line + "\n")
        print(line)
    except Exception:
        print("–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è:", traceback.format_exc())


def ensure_dirs():
    if not os.path.isdir(BACKUP_DIR):
        try:
            os.makedirs(BACKUP_DIR, exist_ok=True)
        except Exception as e:
            log_event(f"–ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É –±–µ–∫–∞–ø—ñ–≤: {e}")


ensure_dirs()


def parse_admin_id(admin_raw) -> Optional[int]:
    if isinstance(admin_raw, int):
        return admin_raw
    if isinstance(admin_raw, str):
        try:
            admin_clean = admin_raw.strip()
            if admin_clean.isdigit():
                return int(admin_clean)
        except Exception:
            return None
    return None


ADMIN_ID_INT = parse_admin_id(ADMIN_ID)

# ============================================
# –ê–≤—Ç–æ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è TZ offset (–≤–∏—Ä—ñ—à—É—î –ø—Ä–æ–±–ª–µ–º—É –∑ —Å–µ—Ä–≤–µ—Ä–Ω–∏–º —á–∞—Å–æ–º)
# ============================================
def detect_tz_offset_hours() -> int:
    """
    –û–±—á–∏—Å–ª—é—î –∑—Å—É–≤ —É –≥–æ–¥–∏–Ω–∞—Ö: datetime.now() - datetime.utcnow().
    –û–∫—Ä—É–≥–ª—é—î –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —Ü—ñ–ª–æ–≥–æ (–∑–∞–∑–≤–∏—á–∞–π 2 –∞–±–æ 3 –¥–ª—è Kyiv),
    –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î 0 —É —Ä–∞–∑—ñ –Ω–µ–≤–¥–∞—á—ñ.
    """
    try:
        now_local_system = datetime.now()
        now_utc = datetime.utcnow()
        delta = now_local_system - now_utc
        hours = int(round(delta.total_seconds() / 3600.0))
        return hours
    except Exception:
        return 0


AUTO_TZ_OFFSET_HOURS = detect_tz_offset_hours()
log_event(f"AUTO_TZ_OFFSET_HOURS detected: {AUTO_TZ_OFFSET_HOURS}")


def now_local() -> datetime:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –ª–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å –¥–ª—è –ª–æ–≥—ñ–∫–∏ –±–æ—Ç–∞ (UTC + AUTO_TZ_OFFSET_HOURS).
    –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –≤–∂–µ –º–∞—î —Ç–æ—á–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å (Kyiv),
    AUTO_TZ_OFFSET_HOURS –º–æ–∂–µ –±—É—Ç–∏ 3 (–∞–±–æ 2 –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ DST).
    """
    return datetime.utcnow() + timedelta(hours=AUTO_TZ_OFFSET_HOURS)


# ============================================
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
# ============================================
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            name TEXT,
            gender TEXT,
            vip INTEGER DEFAULT 0,
            registered INTEGER DEFAULT 0,
            created_at TEXT,
            last_seen TEXT
        )
    """
    )
    c.execute(
        """
        CREATE TABLE IF NOT EXISTS queue (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            group_size INTEGER DEFAULT 1,
            in_shower INTEGER DEFAULT 0,
            start_time TEXT,
            inserted_at TEXT
        )
    """
    )
    c.execute(
        """
        CREATE TABLE IF NOT EXISTS status (
            id INTEGER PRIMARY KEY,
            cabins INTEGER DEFAULT 3,
            water TEXT DEFAULT '–ù–µ–≤—ñ–¥–æ–º–æ',
            last_update TEXT
        )
    """
    )
    c.execute(
        """
        CREATE TABLE IF NOT EXISTS settings (
            key TEXT PRIMARY KEY,
            value TEXT
        )
    """
    )
    c.execute("SELECT id FROM status WHERE id=1")
    if not c.fetchone():
        now = now_local().strftime(DATETIME_FORMAT)
        c.execute("INSERT INTO status (id, cabins, water, last_update) VALUES (1, 3, '–ù–µ–≤—ñ–¥–æ–º–æ', ?)", (now,))
    c.execute("SELECT value FROM settings WHERE key='working_hours'")
    if not c.fetchone():
        working = {
            # 0=Mon ... 6=Sun
            "0": [[10, 14], [17, 21]],
            "1": [[10, 14], [17, 21]],
            "2": [[10, 14], [17, 21]],
            "3": [[10, 14], [17, 21]],
            "4": [[10, 14], [17, 21]],
            "5": [[10, 14], [17, 21]],
        }
        c.execute("INSERT INTO settings (key, value) VALUES (?,?)", ("working_hours", json.dumps(working)))
    c.execute("SELECT value FROM settings WHERE key='avg_times'")
    if not c.fetchone():
        avg_times = {"male_min": 10, "male_max": 15, "female_min": 15, "female_max": 20}
        c.execute("INSERT INTO settings (key, value) VALUES (?,?)", ("avg_times", json.dumps(avg_times)))
    conn.commit()
    conn.close()
    log_event("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


init_db()

# ============================================
# DB helpers
# ============================================
def db_connect():
    return sqlite3.connect(DB_PATH)


def get_user_row(user_id: int) -> Optional[Tuple]:
    conn = db_connect()
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    conn.close()
    return row


def register_user_if_not_exists(user_id: int):
    row = get_user_row(user_id)
    if not row:
        conn = db_connect()
        c = conn.cursor()
        now = now_local().strftime(DATETIME_FORMAT)
        c.execute("INSERT OR IGNORE INTO users (user_id, registered, created_at, last_seen) VALUES (?,0,?,?)", (user_id, now, now))
        conn.commit()
        conn.close()
        log_event(f"–î–æ–¥–∞–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –∑–∞–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}")


def update_user_last_seen(user_id: int):
    conn = db_connect()
    c = conn.cursor()
    now = now_local().strftime(DATETIME_FORMAT)
    c.execute("UPDATE users SET last_seen=? WHERE user_id=?", (now, user_id))
    conn.commit()
    conn.close()


def set_user_registered(user_id: int, name: str, gender: str, vip: int = 0):
    conn = db_connect()
    c = conn.cursor()
    now = now_local().strftime(DATETIME_FORMAT)
    c.execute("UPDATE users SET name=?, gender=?, vip=?, registered=1, last_seen=? WHERE user_id=?", (name, gender, vip, now, user_id))
    conn.commit()
    conn.close()
    log_event(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —è–∫ {name}, {gender}, VIP={vip}")


def add_to_queue(user_id: int, group_size: int = 1):
    conn = db_connect()
    c = conn.cursor()
    now = now_local().strftime(DATETIME_FORMAT)
    c.execute("INSERT INTO queue (user_id, group_size, in_shower, start_time, inserted_at) VALUES (?,?,?,?,?)", (user_id, group_size, 0, None, now))
    conn.commit()
    conn.close()
    log_event(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –¥–æ–¥–∞–Ω–∏–π –≤ —á–µ—Ä–≥—É –≥—Ä—É–ø–∞={group_size}")


def remove_queue_entry_by_user(user_id: int):
    conn = db_connect()
    c = conn.cursor()
    c.execute("DELETE FROM queue WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()
    log_event(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ —á–µ—Ä–≥–∏ (—è–∫—â–æ –±—É–≤).")


def get_full_queue() -> List[Tuple]:
    conn = db_connect()
    c = conn.cursor()
    c.execute("SELECT id, user_id, group_size, in_shower, start_time, inserted_at FROM queue ORDER BY id ASC")
    rows = c.fetchall()
    conn.close()
    return rows


def get_status_row():
    conn = db_connect()
    c = conn.cursor()
    c.execute("SELECT id, cabins, water, last_update FROM status WHERE id=1")
    row = c.fetchone()
    conn.close()
    return row


def update_status_row(cabins: Optional[int] = None, water: Optional[str] = None):
    conn = db_connect()
    c = conn.cursor()
    now = now_local().strftime(DATETIME_FORMAT)
    if cabins is not None:
        c.execute("UPDATE status SET cabins=?, last_update=? WHERE id=1", (cabins, now))
    if water is not None:
        c.execute("UPDATE status SET water=?, last_update=? WHERE id=1", (water, now))
    if cabins is None and water is None:
        c.execute("UPDATE status SET last_update=? WHERE id=1", (now,))
    conn.commit()
    conn.close()
    log_event(f"–û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å –¥—É—à—É cabins={cabins} water={water}")


def set_first_in_shower_by_queue_id(queue_id: int, send_notification: bool = False):
    """
    –ü–æ–∑–Ω–∞—á–∞—î –∑–∞–ø–∏—Å —è–∫ –≤ –¥—É—à—ñ.
    –Ø–∫—â–æ send_notification=True -> –Ω–∞–¥—Å–∏–ª–∞—î DM –∑ –∫–Ω–æ–ø–∫–æ—é '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—É—à' (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è job/–∞–≤—Ç–æ).
    –Ø–∫—â–æ False -> –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î DM (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –±–∞—á–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –º–∏ edit-—É—î–º–æ).
    """
    conn = db_connect()
    c = conn.cursor()
    now = now_local().strftime(DATETIME_FORMAT)
    c.execute("UPDATE queue SET in_shower=1, start_time=? WHERE id=?", (now, queue_id))
    conn.commit()
    c.execute("SELECT user_id FROM queue WHERE id=?", (queue_id,))
    row = c.fetchone()
    conn.close()
    if row:
        uid = row[0]
        log_event(f"–ü–æ–∑–Ω–∞—á–µ–Ω–æ queue.id={queue_id} (user={uid}) —è–∫ –≤ –¥—É—à—ñ.")
        if send_notification:
            try:
                kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—É—à", callback_data="finish_shower")],
                                           [InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —á–µ—Ä–≥—É", callback_data="cancel_queue")]])
                Bot(TOKEN).send_message(uid, "üöø –í–∏ –∑–∞—Ä–∞–∑ —É –¥—É—à—ñ. –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—É—à' —É —Ü—å–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.", reply_markup=kb)
                log_event(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ DM –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –¥—É—à—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {uid}")
            except Exception as e:
                log_event(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ DM –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –¥—É—à—É –¥–ª—è {uid}: {e}")
    else:
        log_event(f"set_first_in_shower_by_queue_id: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å queue_id={queue_id}")


def clear_in_shower_for_user(user_id: int):
    conn = db_connect()
    c = conn.cursor()
    c.execute("DELETE FROM queue WHERE user_id=? AND in_shower=1", (user_id,))
    conn.commit()
    conn.close()
    log_event(f"–í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å –≤ –¥—É—à—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}.")


def shift_queue_if_needed(send_notification: bool = False):
    """
    –Ø–∫—â–æ –Ω–µ–º–∞ –Ω—ñ–∫–æ–≥–æ –≤ –¥—É—à—ñ, –±–µ—Ä–µ –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å —Ç–∞ –ø–æ–∑–Ω–∞—á–∞—î –π–æ–≥–æ –≤ –¥—É—à—ñ.
    –Ø–∫—â–æ send_notification=True -> –Ω–∞–¥—Å–∏–ª–∞—î DM, —ñ–Ω–∞–∫—à–µ –ª–∏—à–µ –ø–æ–º—ñ—á–∞—î (–¥–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤, –∫–æ–ª–∏ –º–∏ edit-—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è).
    –ü–æ–≤–µ—Ä—Ç–∞—î user_id —Ç–æ–≥–æ, —Ö—Ç–æ –ø—ñ—à–æ–≤ –≤ –¥—É—à (–∞–±–æ None).
    """
    q = get_full_queue()
    if not q:
        return None
    in_shower = [r for r in q if r[3] == 1]
    if in_shower:
        return in_shower[0][1]
    first = q[0]
    set_first_in_shower_by_queue_id(first[0], send_notification)
    return first[1]


# ============================================
# Settings helpers
# ============================================
def get_setting(key: str) -> Optional[Any]:
    conn = db_connect()
    c = conn.cursor()
    c.execute("SELECT value FROM settings WHERE key=?", (key,))
    row = c.fetchone()
    conn.close()
    if not row:
        return None
    try:
        return json.loads(row[0])
    except Exception:
        return row[0]


def set_setting(key: str, value: Any):
    conn = db_connect()
    c = conn.cursor()
    if isinstance(value, (dict, list)):
        val = json.dumps(value)
    else:
        val = str(value)
    c.execute("REPLACE INTO settings (key, value) VALUES (?,?)", (key, val))
    conn.commit()
    conn.close()
    log_event(f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {key} = {val}")


def get_setting_safe(key: str):
    try:
        return get_setting(key)
    except Exception as e:
        log_event(f"get_setting_safe error: {e}")
        return None


# ============================================
# Time & wait calculations
# ============================================
def avg_minutes_for_gender(gender: str) -> int:
    avg = get_setting("avg_times")
    if not avg:
        male = (10 + 15) / 2
        female = (15 + 20) / 2
    else:
        male = (avg.get("male_min", 10) + avg.get("male_max", 15)) / 2
        female = (avg.get("female_min", 15) + avg.get("female_max", 20)) / 2
    if gender and gender.lower().startswith("—Ö"):
        return int(round(male))
    else:
        return int(round(female))


def calculate_wait_time_for_user(user_id: int) -> Tuple[int, int]:
    queue = get_full_queue()
    status = get_status_row()
    cabins = status[1] if status else 1
    pos = None
    for idx, row in enumerate(queue):
        if row[1] == user_id:
            pos = idx + 1
            break
    if pos is None:
        return 0, 0
    if pos == 1 and queue[0][3] == 1:
        return 0, 1
    total_minutes = 0.0
    conn = db_connect()
    c = conn.cursor()
    for row in queue[: pos - 1]:
        uid = row[1]
        group = row[2] or 1
        c.execute("SELECT gender FROM users WHERE user_id=?", (uid,))
        g = c.fetchone()
        gender = g[0] if g else "–•–ª–æ–ø–µ—Ü—å"
        avg = avg_minutes_for_gender(gender)
        blocks = math.ceil(group / cabins)
        total_minutes += avg * blocks
    conn.close()
    return math.ceil(total_minutes), pos


def format_minutes_as_text(minutes: int) -> str:
    if minutes < 60:
        return f"{minutes} —Ö–≤"
    h = minutes // 60
    m = minutes % 60
    if m == 0:
        return f"{h} –≥–æ–¥"
    return f"{h} –≥–æ–¥ {m} —Ö–≤"


# ============================================
# Keyboards
# ============================================
def main_menu_markup(vip: bool = False, admin: bool = False) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton("üöø –°—Ç–∞—Ç–∏ –≤ —á–µ—Ä–≥—É", callback_data="join_queue")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –¥—É—à—É", callback_data="status")],
        [InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–≥—É", callback_data="view_queue")],
    ]
    if vip:
        buttons.append([InlineKeyboardButton("‚≠ê –°—Ç–∞—Ç–∏ –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—ñ–º", callback_data="vip_join")])
    if admin:
        buttons.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º—ñ–Ω –º–µ–Ω—é", callback_data="admin_menu")])
    return InlineKeyboardMarkup(buttons)


def minimal_back_markup() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])


def in_shower_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—É—à", callback_data="finish_shower")],
        [InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —á–µ—Ä–≥—É", callback_data="cancel_queue")],
    ])


# ============================================
# Working hours check
# ============================================
def is_working_hours(dt: Optional[datetime] = None) -> bool:
    if dt is None:
        now = now_local()
    else:
        now = dt
    weekday = now.weekday()
    working = get_setting_safe("working_hours")
    if not working:
        working = {
            "0": [[10, 14], [17, 21]],
            "1": [[10, 14], [17, 21]],
            "2": [[10, 14], [17, 21]],
            "3": [[10, 14], [17, 21]],
            "4": [[10, 14], [17, 21]],
            "5": [[10, 14], [17, 21]],
        }
    periods = working.get(str(weekday), [])
    current_minutes = now.hour * 60 + now.minute
    for p in periods:
        try:
            start, end = int(p[0]), int(p[1])
            start_min = start * 60
            end_min = end * 60
            if start_min <= current_minutes < end_min:
                return True
        except Exception:
            continue
    return False


def working_hours_text() -> str:
    working = get_setting_safe("working_hours")
    if not working:
        working = {
            "0": [[10, 14], [17, 21]],
            "1": [[10, 14], [17, 21]],
            "2": [[10, 14], [17, 21]],
            "3": [[10, 14], [17, 21]],
            "4": [[10, 14], [17, 21]],
            "5": [[10, 14], [17, 21]],
        }
    days = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫","–í—ñ–≤—Ç–æ—Ä–æ–∫","–°–µ—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä","–ü'—è—Ç–Ω–∏—Ü—è","–°—É–±–æ—Ç–∞","–ù–µ–¥—ñ–ª—è"]
    parts = []
    for d in range(7):
        periods = working.get(str(d), [])
        if not periods:
            parts.append(f"{days[d]}: –∑–∞–∫—Ä–∏—Ç–æ")
            continue
        segs = []
        for p in periods:
            start, end = int(p[0]), int(p[1])
            if start == 0 and end == 24:
                segs.append("—Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ")
            else:
                segs.append(f"{start:02d}:00‚Äì{end:02d}:00")
        parts.append(f"{days[d]}: {', '.join(segs)}")
    return "\n".join(parts)


def send_not_working_callback(query):
    try:
        text = "‚ö†Ô∏è –ë–æ—Ç –∑–∞—Ä–∞–∑ –Ω–µ –ø—Ä–∞—Ü—é—î –ø–æ–∑–∞ —Ä–æ–±–æ—á–∏–º —á–∞—Å–æ–º.\n\n–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏:\n" + working_hours_text()
        try:
            query.edit_message_text(text)
        except Exception:
            safe_answer(query, show_alert=True, text="–ë–æ—Ç –∑–∞—Ä–∞–∑ –Ω–µ –ø—Ä–∞—Ü—é—î. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏.")
    except Exception as e:
        log_event(f"send_not_working_callback error: {e}")


# ============================================
# Safe answer wrapper
# ============================================
def safe_answer(query, **kwargs):
    try:
        query.answer(**kwargs)
    except Exception as e:
        # —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Ç–∏–ø—É "Query is too old..."
        log_event(f"safe_answer ignored: {e}")


# ============================================
# send in-shower DM (auto)
# ============================================
def send_in_shower_notification(user_id: int):
    kb = in_shower_keyboard()
    text = "üöø –í–∏ –∑–∞—Ä–∞–∑ —É –¥—É—à—ñ. –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—É—à' —É —Ü—å–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ."
    try:
        Bot(TOKEN).send_message(user_id, text, reply_markup=kb)
    except Exception as e:
        log_event(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ DM –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –¥—É—à—É –¥–ª—è {user_id}: {e}")


# ============================================
# Start / Help
# ============================================
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    user_id = user.id
    register_user_if_not_exists(user_id)
    update_user_last_seen(user_id)
    row = get_user_row(user_id)
    need_register = not row or row[5] == 0 or not row[2] or not row[3]
    if need_register:
        update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
        return REGISTER_NAME
    else:
        vip_flag = bool(row[4])
        is_admin = (ADMIN_ID_INT is not None and user_id == ADMIN_ID_INT)
        update.message.reply_text(f"–í—ñ—Ç–∞—é, {row[2]}!", reply_markup=main_menu_markup(vip=vip_flag, admin=is_admin))
        return ConversationHandler.END


def help_command(update: Update, context: CallbackContext):
    update.message.reply_text("–¶–µ–π –±–æ—Ç –∫–µ—Ä—É—î –æ–Ω–ª–∞–π–Ω-—á–µ—Ä–≥–æ—é –¥–æ –¥—É—à—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏.")


# ============================================
# Registration handlers
# ============================================
def register_name_handler(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    context.user_data["reg_name"] = text[:64]
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–•–ª–æ–ø–µ—Ü—å", callback_data="gender_m")],
        [InlineKeyboardButton("–î—ñ–≤—á–∏–Ω–∞", callback_data="gender_f")],
    ])
    update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å:", reply_markup=keyboard)
    return REGISTER_GENDER


def register_gender_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    user_id = query.from_user.id
    data = query.data
    name = context.user_data.get("reg_name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
    gender = "–•–ª–æ–ø–µ—Ü—å" if data == "gender_m" else "–î—ñ–≤—á–∏–Ω–∞"
    set_user_registered(user_id, name, gender, vip=0)
    vip_flag = False
    is_admin = (ADMIN_ID_INT is not None and user_id == ADMIN_ID_INT)
    try:
        query.edit_message_text(text=f"‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–∏–≤—ñ—Ç, {name}.", reply_markup=main_menu_markup(vip=vip_flag, admin=is_admin))
    except Exception:
        try:
            Bot(TOKEN).send_message(user_id, f"‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–∏–≤—ñ—Ç, {name}.")
        except Exception:
            pass
    return ConversationHandler.END


# ============================================
# Join queue handlers
# ============================================
def join_queue_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    user_id = query.from_user.id
    if not is_working_hours() and not (ADMIN_ID_INT is not None and user_id == ADMIN_ID_INT):
        return send_not_working_callback(query)
    user_row = get_user_row(user_id)
    if not user_row or user_row[5] == 0:
        try:
            query.edit_message_text("‚ö†Ô∏è –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–≤–µ–¥—ñ—Ç—å /start —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å.")
        except Exception:
            pass
        return
    q = get_full_queue()
    if any(r[1] == user_id for r in q):
        vip_flag = bool(user_row[4])
        is_admin = (ADMIN_ID_INT is not None and user_id == ADMIN_ID_INT)
        try:
            query.edit_message_text("‚ö†Ô∏è –í–∏ –≤–∂–µ —É —á–µ—Ä–∑—ñ!", reply_markup=main_menu_markup(vip=vip_flag, admin=is_admin))
        except Exception:
            pass
        return
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–û–¥–∏–Ω", callback_data="solo")],
        [InlineKeyboardButton("–ì—Ä—É–ø–æ—é", callback_data="group")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
    ])
    try:
        query.edit_message_text("üöø –í–∏ –π–¥–µ—Ç–µ –≤ –¥—É—à: –æ–¥–∏–Ω —á–∏ –≥—Ä—É–ø–æ—é?", reply_markup=keyboard)
    except Exception:
        pass


def back_to_menu_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    user_id = query.from_user.id
    user_row = get_user_row(user_id)
    vip_flag = bool(user_row[4]) if user_row else False
    is_admin = (ADMIN_ID_INT is not None and user_id == ADMIN_ID_INT)
    try:
        query.edit_message_text("–ú–µ–Ω—é:", reply_markup=main_menu_markup(vip=vip_flag, admin=is_admin))
    except Exception:
        pass


def solo_selected_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    user_id = query.from_user.id
    if not is_working_hours() and not (ADMIN_ID_INT is not None and user_id == ADMIN_ID_INT):
        return send_not_working_callback(query)
    add_to_queue(user_id, group_size=1)
    handle_queue_addition_notifications(query, user_id, 1)


def group_selected_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    user_id = query.from_user.id
    if not is_working_hours() and not (ADMIN_ID_INT is not None and user_id == ADMIN_ID_INT):
        return send_not_working_callback(query)
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("2", callback_data="group_2"), InlineKeyboardButton("3", callback_data="group_3")],
        [InlineKeyboardButton("4", callback_data="group_4"), InlineKeyboardButton("5+", callback_data="group_5")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="join_queue")],
    ])
    try:
        query.edit_message_text("üë• –í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—ñ–± —É –≥—Ä—É–ø—ñ:", reply_markup=keyboard)
    except Exception:
        pass


def handle_group_size_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    user_id = query.from_user.id
    if not is_working_hours() and not (ADMIN_ID_INT is not None and user_id == ADMIN_ID_INT):
        return send_not_working_callback(query)
    data = query.data
    size = 5 if data == "group_5" else int(data.split("_")[1])
    add_to_queue(user_id, group_size=size)
    handle_queue_addition_notifications(query, user_id, size)


def handle_queue_addition_notifications(query, user_id: int, group_size: int):
    """
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —á–µ—Ä–≥—É.
    –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä—à–∏–π -> —Å—Ç–∞–≤–∏–º–æ –≤ –¥—É—à—ñ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—É—à".
    –Ü–Ω–∞–∫—à–µ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é —ñ –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å.
    –¢–∞–∫–æ–∂ –≤–∏–∫–ª–∏–∫–∞—î–º–æ notify_next_user(), —Ç–∞ —ñ–Ω—à—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    """
    try:
        safe_answer(query)
    except Exception:
        pass
    q = get_full_queue()
    pos = None
    for idx, r in enumerate(q):
        if r[1] == user_id:
            pos = idx + 1
            break
    if pos is None:
        try:
            query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—å –∑–Ω–∞–π—Ç–∏ –≤–∞—Å —É —á–µ—Ä–∑—ñ.")
        except Exception:
            pass
        return
    in_shower_list = [r for r in q if r[3] == 1]
    # –Ø–∫—â–æ –ø–µ—Ä—à–∏–π —ñ –Ω—ñ—Ö—Ç–æ –Ω–µ –≤ –¥—É—à—ñ -> –ø–æ–º—ñ—Ç–∏—Ç–∏ —è–∫ –≤ –¥—É—à—ñ —Ç–∞ edit –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–±–µ–∑ DM)
    if pos == 1 and not in_shower_list:
        queue_id = None
        for r in q:
            if r[1] == user_id:
                queue_id = r[0]
                break
        if queue_id is not None:
            set_first_in_shower_by_queue_id(queue_id, send_notification=False)
            kb = in_shower_keyboard()
            try:
                query.edit_message_text(
                    "üöø –í–∏ –ø–µ—Ä—à–∏–π —ñ –∑–∞—Ä–∞–∑ —É –¥—É—à—ñ.\n–ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –≤ —Ü—å–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.",
                    reply_markup=kb,
                )
            except Exception:
                pass
            update_status_row()
            notify_next_user()
            return
    wait_min, position = calculate_wait_time_for_user(user_id)
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —á–µ—Ä–≥—É", callback_data="cancel_queue")]])
    try:
        query.edit_message_text(
            f"üßº –í–∏ –¥–æ–¥–∞–Ω—ñ –≤ —á–µ—Ä–≥—É!\n\n–í–∞—à –Ω–æ–º–µ—Ä —É —á–µ—Ä–∑—ñ: {position}\n–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: ~{format_minutes_as_text(wait_min)}",
            reply_markup=keyboard,
        )
    except Exception:
        pass
    notify_next_user()


# ============================================
# notify_next_user
# ============================================
def notify_next_user():
    q = get_full_queue()
    if not q:
        return
    in_shower_idxs = [i for i, r in enumerate(q) if r[3] == 1]
    if in_shower_idxs:
        first_idx = in_shower_idxs[0]
        next_idx = first_idx + 1
        if next_idx < len(q):
            next_user_id = q[next_idx][1]
            try:
                Bot(TOKEN).send_message(next_user_id, "üîî –í–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π! –ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ —Ä–µ—á—ñ —Ç–∞ —Å–ø—É—Å—Ç—ñ—Ç—å—Å—è üöø")
                log_event(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {next_user_id}")
            except Exception as e:
                log_event(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É {next_user_id}: {e}")
    else:
        if len(q) >= 1:
            first_user = q[0][1]
            try:
                Bot(TOKEN).send_message(first_user, "üîî –í–∏ –ø–µ—Ä—à–∏–π —É —á–µ—Ä–∑—ñ ‚Äî —Å–∫–æ—Ä–æ –ø–æ—á–Ω–µ—Ç—å—Å—è –≤–∞—à–∞ —á–µ—Ä–≥–∞. –ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ—Å—è.")
                log_event(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –ø–µ—Ä—à–æ–≥–æ —É —á–µ—Ä–∑—ñ {first_user}")
            except Exception as e:
                log_event(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø–µ—Ä—à–æ–≥–æ {first_user}: {e}")


# ============================================
# Finish shower + feedback
# ============================================
def finish_shower_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    user_id = query.from_user.id
    q = get_full_queue()
    in_shower = [r for r in q if r[1] == user_id and r[3] == 1]
    if not in_shower:
        try:
            query.edit_message_text("‚ùå –í–∏ –Ω–µ –ø–æ–∑–Ω–∞—á–µ–Ω—ñ —è–∫ '–≤ –¥—É—à—ñ'. –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω–∞.")
        except Exception:
            pass
        return
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑ —á–µ—Ä–≥–∏
    remove_queue_entry_by_user(user_id)
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–¢–µ–ø–ª–∞", callback_data="water_warm"),
         InlineKeyboardButton("–õ–µ–¥—å —Ç–µ–ø–ª–∞", callback_data="water_lukewarm"),
         InlineKeyboardButton("–•–æ–ª–æ–¥–Ω–∞", callback_data="water_cold")],
    ])
    try:
        query.edit_message_text("üßæ –Ø–∫ –≤–∞–º –±—É–ª–∞ –≤–æ–¥–∞?", reply_markup=keyboard)
    except Exception:
        pass


def water_feedback_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    data = query.data
    mapping = {
        "water_warm": "–¢–µ–ø–ª–∞",
        "water_lukewarm": "–õ–µ–¥—å —Ç–µ–ø–ª–∞",
        "water_cold": "–•–æ–ª–æ–¥–Ω–∞",
    }
    water_state = mapping.get(data, "–ù–µ–≤—ñ–¥–æ–º–æ")
    update_status_row(water=water_state)
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(str(i), callback_data=f"cabins_{i}") for i in range(1, 6)]])
    try:
        query.edit_message_text("üöø –°–∫—ñ–ª—å–∫–∏ –∫–∞–±—ñ–Ω–æ–∫ –ø—Ä–∞—Ü—é–≤–∞–ª–æ?", reply_markup=keyboard)
    except Exception:
        pass


def cabins_feedback_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    data = query.data
    cabins = int(data.split("_")[1])
    update_status_row(cabins=cabins)
    # –ü—ñ—Å–ª—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è ‚Äî –∑—Å—É–≤–∞—î–º–æ —á–µ—Ä–≥—É —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ DM —Ç–æ–º—É, —Ö—Ç–æ —Ç–µ–ø–µ—Ä —É –¥—É—à—ñ
    next_user = shift_queue_and_notify(send_notification=True)
    try:
        query.edit_message_text("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! –°—Ç–∞—Ç—É—Å –¥—É—à—É –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=minimal_back_markup())
    except Exception:
        pass


def shift_queue_and_notify(send_notification: bool = True):
    """
    –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É—à—É ‚Äî –∑—Å—É–≤–∞—î–º–æ —á–µ—Ä–≥—É.
    –Ø–∫—â–æ send_notification=True -> –Ω–∞–¥—Å–∏–ª–∞—î–º–æ DM –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, —è–∫–∏–π —Å—Ç–∞–≤ –≤ –¥—É—à—ñ.
    –ü–æ–≤–µ—Ä—Ç–∞—î user_id –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∞–±–æ None.
    """
    q = get_full_queue()
    if not q:
        log_event("–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É—à—É.")
        return None
    in_shower = [r for r in q if r[3] == 1]
    if in_shower:
        return in_shower[0][1]
    first = q[0]
    set_first_in_shower_by_queue_id(first[0], send_notification=send_notification)
    notify_next_user()
    return first[1]


# ============================================
# Cancel queue handler
# ============================================
def cancel_queue_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    user_id = query.from_user.id
    was_in_shower = False
    q = get_full_queue()
    for r in q:
        if r[1] == user_id and r[3] == 1:
            was_in_shower = True
            break
    remove_queue_entry_by_user(user_id)
    try:
        query.edit_message_text("‚ùå –í–∏ –≤–∏–π—à–ª–∏ –∑ —á–µ—Ä–≥–∏.", reply_markup=main_menu_markup(vip=False, admin=(ADMIN_ID_INT == user_id)))
    except Exception:
        pass
    if was_in_shower:
        shift_queue_and_notify(send_notification=True)


# ============================================
# Status & View queue
# ============================================
def status_info_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    status = get_status_row()
    q = get_full_queue()
    conn = db_connect()
    c = conn.cursor()
    in_shower = [r for r in q if r[3] == 1]
    now_in_shower = "‚Äî"
    time_in_shower = "‚Äî"
    if in_shower:
        uid = in_shower[0][1]
        c.execute("SELECT name FROM users WHERE user_id=?", (uid,))
        r = c.fetchone()
        name = r[0] if r else f"UID {uid}"
        gsize = in_shower[0][2]
        group_str = f"(–≥—Ä—É–ø–∞-{gsize})" if gsize and gsize > 1 else "(–æ–¥–∏–Ω)"
        now_in_shower = f"{name} {group_str}"
        if in_shower[0][4]:
            try:
                start_time = datetime.strptime(in_shower[0][4], DATETIME_FORMAT)
                diff = now_local() - start_time
                minutes = diff.seconds // 60
                time_in_shower = format_minutes_as_text(minutes)
            except Exception:
                time_in_shower = "‚Äî"
    next_user = "‚Äî"
    if len(q) > 1:
        next_uid = q[1][1]
        c.execute("SELECT name FROM users WHERE user_id=?", (next_uid,))
        r = c.fetchone()
        next_user = r[0] if r else f"UID {next_uid}"
    conn.close()
    msg = (
        f"üöø *–°—Ç–∞—Ç—É—Å –¥—É—à—É:*\n\n"
        f"–ö–∞–±—ñ–Ω–æ–∫: {status[1]}\n"
        f"–í–æ–¥–∞: {status[2]}\n"
        f"–ó–∞—Ä–∞–∑ —É –¥—É—à—ñ: {now_in_shower}\n"
        f"–ß–∞—Å —É –¥—É—à—ñ: {time_in_shower}\n"
        f"–ù–∞—Å—Ç—É–ø–Ω–∏–π: {next_user}\n"
        f"–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {status[3]}"
    )
    try:
        query.edit_message_text(msg, parse_mode="Markdown", reply_markup=minimal_back_markup())
    except Exception:
        pass


def view_queue_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    q = get_full_queue()
    if not q:
        try:
            query.edit_message_text("üïì –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è.", reply_markup=minimal_back_markup())
        except Exception:
            pass
        return
    conn = db_connect()
    c = conn.cursor()
    lines = []
    for i, r in enumerate(q):
        uid = r[1]
        c.execute("SELECT name FROM users WHERE user_id=?", (uid,))
        row = c.fetchone()
        name = row[0] if row else f"UID {uid}"
        group_str = "(–æ–¥–∏–Ω)" if r[2] == 1 else f"(–≥—Ä—É–ø–∞-{r[2]})"
        status_str = "(–º–∏—î—Ç—å—Å—è)" if r[3] == 1 else ""
        lines.append(f"{i+1}. {name} {group_str} {status_str}")
    conn.close()
    msg = "üìã *–ß–µ—Ä–≥–∞:*\n\n" + "\n".join(lines)
    try:
        query.edit_message_text(msg, parse_mode="Markdown", reply_markup=minimal_back_markup())
    except Exception:
        pass


# ============================================
# VIP: –°—Ç–∞—Ç–∏ –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—ñ–º
# ============================================
def vip_join_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    user_id = query.from_user.id
    if not is_working_hours() and not (ADMIN_ID_INT is not None and user_id == ADMIN_ID_INT):
        return send_not_working_callback(query)
    user_row = get_user_row(user_id)
    if not user_row or not user_row[4]:
        try:
            query.edit_message_text("üö´ –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è VIP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        except Exception:
            pass
        return
    q = get_full_queue()
    if any(r[1] == user_id for r in q):
        try:
            query.edit_message_text("‚ö†Ô∏è –í–∏ –≤–∂–µ —É —á–µ—Ä–∑—ñ.")
        except Exception:
            pass
        return
    vip_positions = []
    for i, r in enumerate(q):
        uid = r[1]
        ur = get_user_row(uid)
        if ur and ur[4] == 1:
            vip_positions.append(i)
    insert_index = len(q)
    if vip_positions:
        insert_index = vip_positions[-1] + 1
    # –Ø–∫—â–æ —á–µ—Ä–≥–∞ –ø—É—Å—Ç–∞ -> –ø–æ–≤–æ–¥–∏–º–æ—Å—è —è–∫ –ø–µ—Ä—à–∏–π (–ø–æ–º—ñ—Ç–∏–º–æ —è–∫ –≤ –¥—É—à—ñ —Ç–∞ edit –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
    if len(q) == 0:
        add_to_queue(user_id, group_size=1)
        conn = db_connect()
        c = conn.cursor()
        c.execute("SELECT id FROM queue WHERE user_id=? ORDER BY id DESC LIMIT 1", (user_id,))
        row = c.fetchone()
        conn.close()
        if row:
            queue_id = row[0]
            set_first_in_shower_by_queue_id(queue_id, send_notification=False)
            kb = in_shower_keyboard()
            try:
                query.edit_message_text("üöø –í–∏ –∑–∞—Ä–∞–∑ —É –¥—É—à—ñ!\n–ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.", reply_markup=kb)
            except Exception:
                pass
            update_status_row()
            notify_next_user()
            return
        else:
            try:
                query.edit_message_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤ —á–µ—Ä–≥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception:
                pass
            return
    # –î–æ–¥–∞—î–º–æ —ñ –ø–µ—Ä–µ—Å–æ—Ä—Ç—É—î–º–æ
    add_to_queue(user_id, group_size=1)
    reorder_queue_to_insert_at(user_id, insert_index)
    q_after = get_full_queue()
    pos = None
    queue_row_id = None
    for idx, r in enumerate(q_after):
        if r[1] == user_id:
            pos = idx + 1
            queue_row_id = r[0]
            break
    in_shower_list = [r for r in q_after if r[3] == 1]
    if pos == 1 and not in_shower_list:
        if queue_row_id is not None:
            set_first_in_shower_by_queue_id(queue_row_id, send_notification=False)
            kb = in_shower_keyboard()
            try:
                query.edit_message_text("üöø –í–∏ –∑–∞—Ä–∞–∑ —É –¥—É—à—ñ!\n–ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.", reply_markup=kb)
            except Exception:
                pass
            update_status_row()
            notify_next_user()
            return
    wait_min, position = calculate_wait_time_for_user(user_id)
    try:
        query.edit_message_text(
            f"‚≠ê –í–∏ —Å—Ç–∞–ª–∏ –≤ —á–µ—Ä–≥—É —è–∫ VIP!\n–í–∞—à –Ω–æ–º–µ—Ä: {position}\n–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: ~{format_minutes_as_text(wait_min)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —á–µ—Ä–≥—É", callback_data="cancel_queue")]])
        )
    except Exception:
        pass


def reorder_queue_to_insert_at(user_id: int, insert_index: int):
    conn = db_connect()
    c = conn.cursor()
    c.execute("SELECT user_id, group_size, in_shower, start_time, inserted_at FROM queue ORDER BY id ASC")
    rows_raw = c.fetchall()
    if not any(r[0] == user_id for r in rows_raw):
        conn.close()
        return
    moving_row = None
    remaining = []
    for r in rows_raw:
        if r[0] == user_id:
            moving_row = r
        else:
            remaining.append(list(r))
    if moving_row is None:
        conn.close()
        return
    if insert_index < 0:
        insert_index = 0
    if insert_index > len(remaining):
        insert_index = len(remaining)
    remaining.insert(insert_index, list(moving_row))
    c.execute("DELETE FROM queue")
    for r in remaining:
        uid, group_size, in_shower, start_time, inserted_at = r
        c.execute("INSERT INTO queue (user_id, group_size, in_shower, start_time, inserted_at) VALUES (?,?,?,?,?)", (uid, group_size, in_shower, start_time, inserted_at))
    conn.commit()
    conn.close()
    log_event(f"–ß–µ—Ä–≥–∞ –ø–µ—Ä–µ—Å–æ—Ä—Ç–æ–≤–∞–Ω–∞: user {user_id} –≤—Å—Ç–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é {insert_index + 1}")


# ============================================
# Admin menu and actions
# ============================================
def admin_menu_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    user_id = query.from_user.id
    if ADMIN_ID_INT is None or user_id != ADMIN_ID_INT:
        try:
            query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")
        except Exception:
            pass
        return
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_users")],
        [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_delete")],
        [InlineKeyboardButton("‚≠ê –ó—Ä–æ–±–∏—Ç–∏ VIP", callback_data="admin_vip")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_settings")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
    ])
    try:
        query.edit_message_text("‚öôÔ∏è –ê–¥–º—ñ–Ω –º–µ–Ω—é:", reply_markup=keyboard)
    except Exception:
        pass


def admin_list_users_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    conn = db_connect()
    c = conn.cursor()
    c.execute("SELECT name, gender, vip, user_id FROM users WHERE registered=1 ORDER BY vip DESC, name ASC")
    rows = c.fetchall()
    conn.close()
    if not rows:
        try:
            query.edit_message_text("‚ùå –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.", reply_markup=minimal_back_markup())
        except Exception:
            pass
        return
    msg = "üë• *–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:*\n\n"
    for i, r in enumerate(rows, 1):
        vip = "—Ç–∞–∫" if r[2] == 1 else "–Ω—ñ"
        msg += f"{i}. {r[0]} (—Å—Ç–∞—Ç—å: {r[1]}) VIP:{vip} ID:{r[3]}\n"
    try:
        query.edit_message_text(msg, parse_mode="Markdown", reply_markup=minimal_back_markup())
    except Exception:
        pass


def admin_delete_user_start_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∞–±–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:")
    return ADMIN_WAIT_DELETE


def admin_delete_user_finish_handler(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    user_id = None
    conn = db_connect()
    c = conn.cursor()
    if text.isdigit():
        c.execute("SELECT user_id FROM users WHERE user_id=?", (int(text),))
        r = c.fetchone()
        if r:
            user_id = r[0]
    else:
        c.execute("SELECT user_id FROM users WHERE name LIKE ?", (text,))
        r = c.fetchone()
        if r:
            user_id = r[0]
    if not user_id:
        update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        conn.close()
        return ConversationHandler.END
    c.execute("DELETE FROM users WHERE user_id=?", (user_id,))
    c.execute("DELETE FROM queue WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()
    update.message.reply_text("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏.")
    shift_queue_and_notify(send_notification=True)
    return ConversationHandler.END


def admin_make_vip_start_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    query.edit_message_text("‚≠ê –í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∞–±–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –π–æ–≥–æ VIP:")
    return ADMIN_WAIT_VIP


def admin_make_vip_finish_handler(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    user_id = None
    conn = db_connect()
    c = conn.cursor()
    if text.isdigit():
        c.execute("SELECT user_id FROM users WHERE user_id=?", (int(text),))
        r = c.fetchone()
        if r:
            user_id = r[0]
    else:
        c.execute("SELECT user_id FROM users WHERE name LIKE ?", (text,))
        r = c.fetchone()
        if r:
            user_id = r[0]
    if not user_id:
        update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        conn.close()
        return ConversationHandler.END
    c.execute("UPDATE users SET vip=1 WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()
    update.message.reply_text("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–∏—Å–≤–æ—î–Ω–æ —Å—Ç–∞—Ç—É—Å VIP.")
    return ConversationHandler.END


# ============================================
# Admin settings
# ============================================
def admin_settings_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    user_id = query.from_user.id
    if ADMIN_ID_INT is None or user_id != ADMIN_ID_INT:
        try:
            query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")
        except Exception:
            pass
        return
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚è± –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å (—Ö–ª–æ–ø—Ü—ñ/–¥—ñ–≤—á–∞—Ç–∞)", callback_data="admin_avg_times")],
        [InlineKeyboardButton("üïí –†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏", callback_data="admin_working_hours")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")],
    ])
    try:
        query.edit_message_text("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω–∞:", reply_markup=keyboard)
    except Exception:
        pass


def admin_avg_times_start(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    avg = get_setting("avg_times")
    if not avg:
        avg = {"male_min": 10, "male_max": 15, "female_min": 15, "female_max": 20}
    msg = (
        "–ü–æ—Ç–æ—á–Ω—ñ —Å–µ—Ä–µ–¥–Ω—ñ —á–∞—Å–∏ (—Ö–≤–∏–ª–∏–Ω):\n"
        f"–•–ª–æ–ø—Ü—ñ: {avg.get('male_min')} - {avg.get('male_max')}\n"
        f"–î—ñ–≤—á–∞—Ç–∞: {avg.get('female_min')} - {avg.get('female_max')}\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ: male_min,male_max,female_min,female_max\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 10,15,15,20"
    )
    try:
        query.edit_message_text(msg)
    except Exception:
        pass
    return ADMIN_WAIT_MAKE_SETTINGS


def admin_avg_times_finish(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    parts = [p.strip() for p in text.split(",")]
    if len(parts) != 4 or not all(p.isdigit() for p in parts):
        update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return ConversationHandler.END
    male_min, male_max, female_min, female_max = map(int, parts)
    set_setting("avg_times", {"male_min": male_min, "male_max": male_max, "female_min": female_min, "female_max": female_max})
    update.message.reply_text("‚úÖ –ó–Ω–∞—á–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö —á–∞—Å—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    return ConversationHandler.END


def admin_working_hours_start(update: Update, context: CallbackContext):
    query = update.callback_query
    safe_answer(query)
    working = get_setting("working_hours")
    if not working:
        working = {}
    msg = "–ü–æ—Ç–æ—á–Ω—ñ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ (JSON —Ñ–æ—Ä–º–∞—Ç):\n" + json.dumps(working, indent=2, ensure_ascii=False) + "\n\n" \
          "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –Ω–æ–≤—ñ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç—ñ, –¥–µ –∫–ª—é—á—ñ ‚Äî –¥–Ω—ñ —Ç–∏–∂–Ω—è (0=–ü–æ–Ω–µ–¥—ñ–ª–æ–∫ ... 6=–ù–µ–¥—ñ–ª—è), –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—ñ–æ–¥—ñ–≤ [start_hour,end_hour].\n" \
          "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n" \
          '{"0": [[10,14],[17,21]], "6": [[0,24]]}\n' \
          "–ë—É–¥—å—Ç–µ —É–≤–∞–∂–Ω—ñ –∑ —Ñ–æ—Ä–º–∞—Ç–æ–º!"
    try:
        query.edit_message_text(msg)
    except Exception:
        pass
    return ADMIN_WAIT_MAKE_SETTINGS


def admin_working_hours_finish(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    try:
        parsed = json.loads(text)
        for k, v in parsed.items():
            if not k.isdigit():
                raise ValueError("–∫–ª—é—á—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏")
            if not isinstance(v, list):
                raise ValueError("–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Å–ø–∏—Å–∫–∞–º–∏")
        set_setting("working_hours", parsed)
        update.message.reply_text("‚úÖ –†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ JSON: " + str(e))
    return ConversationHandler.END


# ============================================
# Backup / DB check
# ============================================
def backup_database():
    try:
        ensure_dirs()
        timestamp = now_local().strftime("%Y%m%d_%H%M%S")
        backup_name = os.path.join(BACKUP_DIR, f"backup_{timestamp}.db")
        shutil.copy(DB_PATH, backup_name)
        log_event(f"üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è –ë–î —Å—Ç–≤–æ—Ä–µ–Ω–∞: {backup_name}")
        return backup_name
    except Exception as e:
        log_event(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é: {e}")
        return None


def check_database_integrity():
    try:
        conn = db_connect()
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users")
        c.execute("SELECT COUNT(*) FROM queue")
        c.execute("SELECT COUNT(*) FROM status")
        conn.close()
        log_event("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—Ä–æ–π—à–ª–∞.")
    except Exception as e:
        log_event(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")


# ============================================
# job_update_status
# ============================================
def job_update_status(context: CallbackContext):
    try:
        log_event("–ó–∞–ø—É—Å–∫ job_update_status")
        # –Ø–∫—â–æ –ø–æ–∑–∞ —Ä–æ–±–æ—á–∏–º —á–∞—Å–æ–º ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
        if not is_working_hours():
            log_event("–ü–æ–∑–∞ —Ä–æ–±–æ—á–∏–º —á–∞—Å–æ–º ‚Äî job_update_status –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç—å.")
            return
        current_in_shower = [r for r in get_full_queue() if r[3] == 1]
        if not current_in_shower:
            first_id = shift_queue_if_needed(send_notification=True)
            if first_id:
                log_event(f"–ê–≤—Ç–æ-–∑–∞–ø—É—Å–∫: –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –¥—É—à user={first_id}")
        q = get_full_queue()
        for r in q:
            uid = r[1]
            wait_min, pos = calculate_wait_time_for_user(uid)
            try:
                if pos > 1 and wait_min <= 5:
                    context.bot.send_message(uid, f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –≤–∞—à –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è ~{format_minutes_as_text(wait_min)}. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ñ.")
            except Exception:
                pass
    except Exception as e:
        log_event(f"–ü–æ–º–∏–ª–∫–∞ –≤ job_update_status: {traceback.format_exc()}")


# ============================================
# Button router
# ============================================
def button_router(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    try:
        if data == "join_queue":
            return join_queue_handler(update, context)
        elif data == "solo":
            return solo_selected_handler(update, context)
        elif data == "group":
            return group_selected_handler(update, context)
        elif data.startswith("group_"):
            return handle_group_size_handler(update, context)
        elif data == "finish_shower":
            return finish_shower_handler(update, context)
        elif data in ("water_warm", "water_lukewarm", "water_cold"):
            return water_feedback_handler(update, context)
        elif data.startswith("cabins_"):
            return cabins_feedback_handler(update, context)
        elif data == "cancel_queue":
            return cancel_queue_handler(update, context)
        elif data == "status":
            return status_info_handler(update, context)
        elif data == "view_queue":
            return view_queue_handler(update, context)
        elif data == "back_to_menu":
            return back_to_menu_handler(update, context)
        elif data == "admin_menu":
            return admin_menu_handler(update, context)
        elif data == "admin_users":
            return admin_list_users_handler(update, context)
        elif data == "admin_delete":
            return admin_delete_user_start_handler(update, context)
        elif data == "admin_vip":
            return admin_make_vip_start_handler(update, context)
        elif data == "vip_join":
            return vip_join_handler(update, context)
        elif data == "admin_settings":
            return admin_settings_handler(update, context)
        elif data == "admin_avg_times":
            return admin_avg_times_start(update, context)
        elif data == "admin_working_hours":
            return admin_working_hours_start(update, context)
        else:
            safe_answer(query, show_alert=True, text="–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
    except Exception as e:
        log_event(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ button_router: {traceback.format_exc()}")
        try:
            safe_answer(query, show_alert=True, text="–ü–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥.")
        except Exception:
            pass


# ============================================
# Text handlers and admin commands
# ============================================
def unknown_text_handler(update: Update, context: CallbackContext):
    update.message.reply_text("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start.")


def cmd_backup(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if ADMIN_ID_INT is None or user_id != ADMIN_ID_INT:
        update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")
        return
    backup = backup_database()
    if backup:
        update.message.reply_text(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ: {backup}")
    else:
        update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏.")


def cmd_stats(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if ADMIN_ID_INT is None or user_id != ADMIN_ID_INT:
        update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")
        return
    conn = db_connect()
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM users")
    total_users = c.fetchone()[0]
    c.execute("SELECT COUNT(*) FROM queue")
    total_in_queue = c.fetchone()[0]
    c.execute("SELECT COUNT(*) FROM users WHERE vip=1")
    vip_users = c.fetchone()[0]
    conn.close()
    status = get_status_row()
    cabins = status[1] if status else "‚Äî"
    water = status[2] if status else "‚Äî"
    stats = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
        f"üë• –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
        f"üèÜ VIP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {vip_users}\n"
        f"üöø –£ —á–µ—Ä–∑—ñ –∑–∞—Ä–∞–∑: {total_in_queue}\n"
        f"üß∞ –†–æ–±–æ—á–∏—Ö –∫–∞–±—ñ–Ω–æ–∫: {cabins}\n"
        f"üíß –í–æ–¥–∞: {water}"
    )
    update.message.reply_text(stats)


# ============================================
# Diagnostic command: nowinfo
# ============================================
def nowinfo_cmd(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    utc = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    local_system = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    auto_offset = AUTO_TZ_OFFSET_HOURS
    nowloc = now_local().strftime("%Y-%m-%d %H:%M:%S")
    working = is_working_hours()
    text = (
        f"UTC (datetime.utcnow()): {utc}\n"
        f"System local (datetime.now()): {local_system}\n"
        f"AUTO_TZ_OFFSET_HOURS: {auto_offset}\n"
        f"now_local() (UTC + offset): {nowloc}\n"
        f"is_working_hours(): {working}\n\n"
        "–Ø–∫—â–æ now_local() –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∞—à–æ–º—É –∫–∏—ó–≤—Å—å–∫–æ–º—É —á–∞—Å—É ‚Äî –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–µ—Ä–≤–µ—Ä–Ω–∏–π —á–∞—Å –∞–±–æ –ø–æ–≤—ñ–¥–æ–º—Ç–µ –º–µ–Ω—ñ."
    )
    update.message.reply_text(text)


# ============================================
# Main
# ============================================
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ '–û–Ω–ª–∞–π–Ω —á–µ—Ä–≥–∞ –≤ –¥—É—à'...")
    log_event("–°—Ç–∞—Ä—Ç –±–æ—Ç–∞")
    init_db()
    check_database_integrity()
    try:
        log_event(f"–õ–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (now_local): {now_local().strftime(DATETIME_FORMAT)}, is_working={is_working_hours()}")
    except Exception:
        pass

    if TOKEN == "–í—Å—Ç–∞–≤—Ç–µ —Ç–æ–∫–µ–Ω —Ç—É—Ç":
        print("‚ö†Ô∏è –£–í–ê–ì–ê: –í–∏ –Ω–µ –≤—Å—Ç–∞–≤–∏–ª–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ –∑–º—ñ–Ω–Ω—É TOKEN —É —Ñ–∞–π–ª—ñ bot.py.")
        log_event("–¢–æ–∫–µ–Ω –Ω–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
        return
    try:
        updater = Updater(TOKEN, use_context=True)
    except Exception as e:
        log_event(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –¥–æ Telegram: {e}")
        raise
    dp = updater.dispatcher

    register_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            REGISTER_NAME: [MessageHandler(Filters.text & ~Filters.command, register_name_handler)],
            REGISTER_GENDER: [CallbackQueryHandler(register_gender_handler, pattern="^gender_")],
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
        allow_reentry=True,
    )

    admin_delete_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_delete_user_start_handler, pattern="^admin_delete$")],
        states={ADMIN_WAIT_DELETE: [MessageHandler(Filters.text & ~Filters.command, admin_delete_user_finish_handler)]},
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
    )

    admin_vip_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_make_vip_start_handler, pattern="^admin_vip$")],
        states={ADMIN_WAIT_VIP: [MessageHandler(Filters.text & ~Filters.command, admin_make_vip_finish_handler)]},
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
    )

    admin_settings_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(admin_avg_times_start, pattern="^admin_avg_times$"),
            CallbackQueryHandler(admin_working_hours_start, pattern="^admin_working_hours$"),
        ],
        states={ADMIN_WAIT_MAKE_SETTINGS: [MessageHandler(Filters.text & ~Filters.command, admin_avg_times_finish)]},
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
    )

    dp.add_handler(register_conv)
    dp.add_handler(admin_delete_conv)
    dp.add_handler(admin_vip_conv)
    dp.add_handler(CallbackQueryHandler(button_router))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("backup", cmd_backup))
    dp.add_handler(CommandHandler("stats", cmd_stats))
    dp.add_handler(CommandHandler("nowinfo", nowinfo_cmd))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, unknown_text_handler))
    dp.add_handler(MessageHandler(Filters.command, unknown_text_handler))

    job_queue = updater.job_queue
    job_queue.run_repeating(job_update_status, interval=30, first=10)

    updater.start_polling()
    log_event("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –æ—á—ñ–∫—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏.")
    updater.idle()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        log_event("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É (KeyboardInterrupt).")
        print("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
    except Exception as e:
        log_event(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {traceback.format_exc()}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

# ============================================
# –ö—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É
# ============================================
